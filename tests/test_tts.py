from video_dubbing.tts import find_best_matches


lines = [
    "而没有对 off.py 进行更改。",
    "所以在这一点上，你知道，这非常成问题，对吧？因为，你知道，银行 PPI 现在与 TechCash 相关联。 但我们实际上不再有用户的适当应用程序了。",
    "事实上，任何创建 Zuber 帐户的人现在都可以与 TechHash 交互。",
    "所以显 然非常非常不希望发生，而且更难发现，对吗？因为基本上伦理领域实际上并没有真正修改任何软件。",
    "我只是有选择地呈现并获取 其中的一部分，然后呈现给那些实际上离开并部署它的人。",
    "所以这实际上当然是税收，这篇论文。 当然，考虑的是第一或第二种攻击，但实际上很多微妙的问题都是通过我们将要讨论的第二种情况引出的。",
    "到目前为止，关于设置和动机有什么问题吗？",
    "在我 们尝试讨论解决方案之前。 第二种情况的问题是用户 身份验证是否未进行身份验证？ 是的，它不再使用 MIT 证书了。",
    "所以我们 实际上并不知道是谁登录的。 谢谢。 如果是这种情况呢 呃，或者像 b 不会看到 a 的 fork",
    "让我们假设 A 和 B 实际上在分工时 已经互相交谈过，并且他们知道他们应该一起做这件事。",
    "我的意思是，他们组成一个团队，他们密切合作，保持联系，你知道。",
    "他们分工合作，所以他们知道，你知道，b 告诉 a 他什么时候完成，b 告诉 a 他什么时候完成，然后他们告诉 c，继续，我们都完成了，好吗",
    "好的，让我们从考虑一个过于简单的设计开始，这意味着它不起作用。",
    "但这为我们提供了一些起点，可以进行更复杂 的设计，希望它能起作用。",
    "所以简单的计划是 A&B 或任何 所有文件都将由修改它的人签名，所以当像一个 修改了 off.py",
    "AA 实际上生成了一个签名，并用公钥签名。",
    "该签名分配给 A 的公钥，并且该签名覆盖了文件的数据。",
    "因此，当 C 下载 off.py  时，检查签名。",
    "如果信号检查通过，那么 C 知道实际上这个文件是由 A 产生的。这个文件确实是由 A 产生的。 并且可能都认为 事情进展顺利。",
    "嗯，这就是基本计划，你知道，我们将稍微谈谈密钥的来源 公钥分发的问题实际上是一个858话题，所以我不会过 多谈论它。但现在假设每个用户都有一个密钥。",
    "一个私钥对，私钥是保密的，公钥是公开的，并且每个用户都知道谁 一个公钥属于谁。现在让我们考虑一些攻击。",
    "看看哪些会失败，哪些会成功。 当然，最明显的攻击是我们在上一张幻灯片中讨论的第一个，即S 修改文件。",
]
words = [
    "而",
    "没有",
    "对",
    "off",
    "py",
    "进行",
    "更改",
    "所以",
    "在",
    "这",
    "一",
    "点",
    "上",
    "你",
    "知道",
    "这",
    "非常",
    "成",
    "问题",
    "对",
    "吧",
    "因为",
    "你",
    "知道",
    "银行",
    "PPI",
    "现在",
    "与",
    "TechCash",
    "相",
    "关联",
    "但",
    "我们",
    "实际上",
    "不再",
    "有",
    "用户",
    "的",
    "适当",
    "应用",
    "程序",
    "了",
    "事实上",
    "任何",
    "创建",
    "Zuber",
    "帐户",
    "的",
    "人",
    "现在",
    "都",
    "可以",
    "与",
    "TechHash",
    "交互",
    "所以",
    "显然",
    "非常",
    "非常",
    "不",
    "希望",
    "发生",
    "而且",
    "更",
    "难",
    "发现",
    "对",
    "吗",
    "因为",
    "基本上",
    "伦理",
    "领域",
    "实际上",
    "并",
    "没有",
    "真正",
    "修改",
    "任何",
    "软件",
    "我",
    "只是",
    "有",
    "选择",
    "地",
    "呈现",
    "并",
    "获取",
    "其中",
    "的",
    "一部分",
    "然后",
    "呈现",
    "给",
    "那些",
    "实际上",
    "离开",
    "并",
    "部署",
    "它",
    "的",
    "人",
    "所以",
    "这",
    "实际上",
    "当然",
    "是",
    "税收",
    "这",
    "篇",
    "论文",
    "当然",
    "考虑",
    "的",
    "是",
    "第一",
    "或",
    "第二",
    "种",
    "攻击",
    "但",
    "实际上",
    "很多",
    "微妙",
    "的",
    "问题",
    "都",
    "是",
    "通过",
    "我们",
    "将要",
    "讨论",
    "的",
    "第二",
    "种",
    "情况",
    "引出",
    "的",
    "到",
    "目前",
    "为止",
    "关于",
    "设置",
    "和",
    "动机",
    "有",
    "什么",
    "问题",
    "吗",
    "在",
    "我们",
    "尝试",
    "讨论",
    "解决",
    "方案",
    "之前",
    "第二种",
    "情况",
    "的",
    "问题",
    "是",
    "用户",
    "是否",
    "未进",
    "行身",
    "份",
    "验证",
    "？ ",
    "是的",
    "不再",
    "用",
    " M",
    "IT",
    "证书了",
    "\n所",
    "以",
    "实际",
    "上并",
    "看",
    " a",
    " 的",
    "f",
    "r",
    "\n让我们",
    "设",
    " A",
    " 和",
    "B",
    "实",
    "上",
    "分工时",
    "已",
    "经互",
    "相",
    "交谈",
    "过，",
    "并且",
    "他",
    "知道",
    "他们",
    "应该",
    "一起",
    "做这",
    "件事",
    "。",
    "\n",
    "我",
    "的",
    "是",
    "，",
    "他们",
    "组",
    " 一个",
    "团队",
    "，他",
    "们密",
    "合作",
    "，保",
    "持联",
    "，你",
    "知道",
    "\n",
    "他们",
    "合作",
    "，所以他",
    "知道",
    "，你",
    "知道",
    "b",
    " 告",
    " ",
    " 他",
    "么",
    "候",
    "完成，b",
    " 告",
    " ",
    " 他",
    "么",
    "候",
    "完成，然",
    "后他",
    "告诉",
    " c",
    "，继",
    "，",
    "们都",
    "成了",
    "，",
    "好吗",
    "\n",
    "的",
    "，",
    "我",
    "们",
    "考",
    "虑一",
    "个",
    "过于",
    "简单",
    "的设",
    "计开",
    "始",
    "，这",
    "意味",
    "它",
    "不起",
    "作",
    "用",
    "。",
    "\n",
    "但这",
    "们",
    "提",
    "供",
    "了一",
    "些起",
    "点",
    "，可",
    "以进",
    "更复",
    "杂的",
    "设",
    "计，",
    "希",
    "望它",
    "起作",
    "用",
    "。",
    "\n所以",
    "的计",
    "划是",
    " ",
    "A&",
    "a",
    "p",
    ";B 或任",
    "何",
    "所",
    "有文",
    "都将",
    "由修",
    "改",
    "它",
    "的",
    "人签",
    "名",
    "，",
    "所",
    "以当",
    "一个",
    " ",
    "修",
    "改了",
    "of",
    "f",
    "py\n",
    "A ",
    "际上",
    "成了一",
    "个签",
    "名",
    "，并",
    "用公",
    "签",
    "名",
    "。\n",
    "该签",
    "配",
    "给 ",
    "A ",
    "的",
    "钥",
    "并",
    "且该",
    "名覆",
    "盖",
    "了文",
    "件的",
    "数",
    "据。",
    "\n",
    "因此",
    " C",
    "下",
    " ",
    "ff",
    "py ",
    "，检",
    "签",
    "。\n",
    # "如果",
    "检查",
    "通过",
    "，那",
    "么 ",
    " 知",
    "实",
    "上这",
    "个文件",
    "是由",
    " A",
    " ",
    "产",
    "的",
    "这个",
    "文",
    "确实",
    "是由",
    " A",
    " ",
    "产",
    "的",
    " 并",
    "且",
    "都认",
    "为事",
    "情",
    "进展",
    "顺利",
    "。\n",
    "嗯，",
    "是",
    "本",
    "计",
    "划",
    "，你",
    "知道",
    "我",
    "们将",
    "微谈",
    "谈",
    "密钥",
    "的来",
    "源 ",
    "公",
    "钥分",
    "的问",
    "题实",
    "际",
    "上是",
    "一个8",
    "5",
    "8话",
    "题，所",
    "以我",
    "会过",
    "多",
    "谈论",
    "它。",
    "但现",
    "在",
    "设",
    "每个",
    "用户",
    "都有",
    "一个",
    "密",
    "钥",
    "。\n",
    "一个",
    "对，",
    "私钥",
    "是",
    "密的",
    "，",
    "公钥",
    "是",
    "开的",
    "，",
    "并且",
    "每",
    "用户",
    "都知",
    "道谁",
    " ",
    "一个",
    "公",
    "属于",
    "谁。",
    "现在",
    "让",
    "们考",
    "虑",
    "一些",
    "攻 击",
    "。\n",
    "看看",
    "会失",
    "败，",
    "哪",
    "些会",
    "功。",
    " ",
    "当然",
    "明显",
    "攻",
    "击是",
    "我",
    "们在",
    "上",
    "一张",
    "幻",
    "灯",
    "片",
    "中",
    "讨论的",
    "第",
    "一个",
    "，",
    "即S修",
    "文",
    "件",
    "。<",
    "/p",
]


def test_fuzzy_matcher():
    results = find_best_matches(lines, words)
    print(f"匹配结果: {results}")
    ends = [results[i] for i in range(1, len(lines))] + [None]
    for i, (line, start, end) in enumerate(zip(lines, results, ends)):
        print(f"{i}: {line} -> {''.join(words[start:end])}")


if __name__ == "__main__":
    test_fuzzy_matcher()
